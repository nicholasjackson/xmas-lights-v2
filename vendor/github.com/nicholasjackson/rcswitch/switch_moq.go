// Code generated by moq; DO NOT EDIT
// github.com/matryer/moq

package rcswitch

import (
	"sync"
)

var (
	lockSwitchMockScan sync.RWMutex
	lockSwitchMockSend sync.RWMutex
)

// SwitchMock is a mock implementation of Switch.
//
//     func TestSomethingThatUsesSwitch(t *testing.T) {
//
//         // make and configure a mocked Switch
//         mockedSwitch := &SwitchMock{
//             ScanFunc: func()  {
// 	               panic("TODO: mock out the Scan method")
//             },
//             SendFunc: func(data string, protocolID int)  {
// 	               panic("TODO: mock out the Send method")
//             },
//         }
//
//         // TODO: use mockedSwitch in code that requires Switch
//         //       and then make assertions.
//
//     }
type SwitchMock struct {
	// ScanFunc mocks the Scan method.
	ScanFunc func()

	// SendFunc mocks the Send method.
	SendFunc func(data string, protocolID int)

	// calls tracks calls to the methods.
	calls struct {
		// Scan holds details about calls to the Scan method.
		Scan []struct {
		}
		// Send holds details about calls to the Send method.
		Send []struct {
			// Data is the data argument value.
			Data string
			// ProtocolID is the protocolID argument value.
			ProtocolID int
		}
	}
}

// Scan calls ScanFunc.
func (mock *SwitchMock) Scan() {
	if mock.ScanFunc == nil {
		panic("moq: SwitchMock.ScanFunc is nil but Switch.Scan was just called")
	}
	callInfo := struct {
	}{}
	lockSwitchMockScan.Lock()
	mock.calls.Scan = append(mock.calls.Scan, callInfo)
	lockSwitchMockScan.Unlock()
	mock.ScanFunc()
}

// ScanCalls gets all the calls that were made to Scan.
// Check the length with:
//     len(mockedSwitch.ScanCalls())
func (mock *SwitchMock) ScanCalls() []struct {
} {
	var calls []struct {
	}
	lockSwitchMockScan.RLock()
	calls = mock.calls.Scan
	lockSwitchMockScan.RUnlock()
	return calls
}

// Send calls SendFunc.
func (mock *SwitchMock) Send(data string, protocolID int) {
	if mock.SendFunc == nil {
		panic("moq: SwitchMock.SendFunc is nil but Switch.Send was just called")
	}
	callInfo := struct {
		Data       string
		ProtocolID int
	}{
		Data:       data,
		ProtocolID: protocolID,
	}
	lockSwitchMockSend.Lock()
	mock.calls.Send = append(mock.calls.Send, callInfo)
	lockSwitchMockSend.Unlock()
	mock.SendFunc(data, protocolID)
}

// SendCalls gets all the calls that were made to Send.
// Check the length with:
//     len(mockedSwitch.SendCalls())
func (mock *SwitchMock) SendCalls() []struct {
	Data       string
	ProtocolID int
} {
	var calls []struct {
		Data       string
		ProtocolID int
	}
	lockSwitchMockSend.RLock()
	calls = mock.calls.Send
	lockSwitchMockSend.RUnlock()
	return calls
}
