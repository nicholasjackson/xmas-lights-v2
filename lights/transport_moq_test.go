// Code generated by moq; DO NOT EDIT
// github.com/matryer/moq

package lights

import (
	"sync"
)

var (
	lockViceTransportMockDone    sync.RWMutex
	lockViceTransportMockErrChan sync.RWMutex
	lockViceTransportMockReceive sync.RWMutex
	lockViceTransportMockSend    sync.RWMutex
	lockViceTransportMockStop    sync.RWMutex
)

// ViceTransportMock is a mock implementation of ViceTransport.
//
//     func TestSomethingThatUsesViceTransport(t *testing.T) {
//
//         // make and configure a mocked ViceTransport
//         mockedViceTransport := &ViceTransportMock{
//             DoneFunc: func() chan struct{} {
// 	               panic("TODO: mock out the Done method")
//             },
//             ErrChanFunc: func() <-chan error {
// 	               panic("TODO: mock out the ErrChan method")
//             },
//             ReceiveFunc: func(name string) <-chan []byte {
// 	               panic("TODO: mock out the Receive method")
//             },
//             SendFunc: func(name string) chan<- []byte {
// 	               panic("TODO: mock out the Send method")
//             },
//             StopFunc: func()  {
// 	               panic("TODO: mock out the Stop method")
//             },
//         }
//
//         // TODO: use mockedViceTransport in code that requires ViceTransport
//         //       and then make assertions.
//
//     }
type ViceTransportMock struct {
	// DoneFunc mocks the Done method.
	DoneFunc func() chan struct{}

	// ErrChanFunc mocks the ErrChan method.
	ErrChanFunc func() <-chan error

	// ReceiveFunc mocks the Receive method.
	ReceiveFunc func(name string) <-chan []byte

	// SendFunc mocks the Send method.
	SendFunc func(name string) chan<- []byte

	// StopFunc mocks the Stop method.
	StopFunc func()

	// calls tracks calls to the methods.
	calls struct {
		// Done holds details about calls to the Done method.
		Done []struct {
		}
		// ErrChan holds details about calls to the ErrChan method.
		ErrChan []struct {
		}
		// Receive holds details about calls to the Receive method.
		Receive []struct {
			// Name is the name argument value.
			Name string
		}
		// Send holds details about calls to the Send method.
		Send []struct {
			// Name is the name argument value.
			Name string
		}
		// Stop holds details about calls to the Stop method.
		Stop []struct {
		}
	}
}

// Done calls DoneFunc.
func (mock *ViceTransportMock) Done() chan struct{} {
	if mock.DoneFunc == nil {
		panic("moq: ViceTransportMock.DoneFunc is nil but ViceTransport.Done was just called")
	}
	callInfo := struct {
	}{}
	lockViceTransportMockDone.Lock()
	mock.calls.Done = append(mock.calls.Done, callInfo)
	lockViceTransportMockDone.Unlock()
	return mock.DoneFunc()
}

// DoneCalls gets all the calls that were made to Done.
// Check the length with:
//     len(mockedViceTransport.DoneCalls())
func (mock *ViceTransportMock) DoneCalls() []struct {
} {
	var calls []struct {
	}
	lockViceTransportMockDone.RLock()
	calls = mock.calls.Done
	lockViceTransportMockDone.RUnlock()
	return calls
}

// ErrChan calls ErrChanFunc.
func (mock *ViceTransportMock) ErrChan() <-chan error {
	if mock.ErrChanFunc == nil {
		panic("moq: ViceTransportMock.ErrChanFunc is nil but ViceTransport.ErrChan was just called")
	}
	callInfo := struct {
	}{}
	lockViceTransportMockErrChan.Lock()
	mock.calls.ErrChan = append(mock.calls.ErrChan, callInfo)
	lockViceTransportMockErrChan.Unlock()
	return mock.ErrChanFunc()
}

// ErrChanCalls gets all the calls that were made to ErrChan.
// Check the length with:
//     len(mockedViceTransport.ErrChanCalls())
func (mock *ViceTransportMock) ErrChanCalls() []struct {
} {
	var calls []struct {
	}
	lockViceTransportMockErrChan.RLock()
	calls = mock.calls.ErrChan
	lockViceTransportMockErrChan.RUnlock()
	return calls
}

// Receive calls ReceiveFunc.
func (mock *ViceTransportMock) Receive(name string) <-chan []byte {
	if mock.ReceiveFunc == nil {
		panic("moq: ViceTransportMock.ReceiveFunc is nil but ViceTransport.Receive was just called")
	}
	callInfo := struct {
		Name string
	}{
		Name: name,
	}
	lockViceTransportMockReceive.Lock()
	mock.calls.Receive = append(mock.calls.Receive, callInfo)
	lockViceTransportMockReceive.Unlock()
	return mock.ReceiveFunc(name)
}

// ReceiveCalls gets all the calls that were made to Receive.
// Check the length with:
//     len(mockedViceTransport.ReceiveCalls())
func (mock *ViceTransportMock) ReceiveCalls() []struct {
	Name string
} {
	var calls []struct {
		Name string
	}
	lockViceTransportMockReceive.RLock()
	calls = mock.calls.Receive
	lockViceTransportMockReceive.RUnlock()
	return calls
}

// Send calls SendFunc.
func (mock *ViceTransportMock) Send(name string) chan<- []byte {
	if mock.SendFunc == nil {
		panic("moq: ViceTransportMock.SendFunc is nil but ViceTransport.Send was just called")
	}
	callInfo := struct {
		Name string
	}{
		Name: name,
	}
	lockViceTransportMockSend.Lock()
	mock.calls.Send = append(mock.calls.Send, callInfo)
	lockViceTransportMockSend.Unlock()
	return mock.SendFunc(name)
}

// SendCalls gets all the calls that were made to Send.
// Check the length with:
//     len(mockedViceTransport.SendCalls())
func (mock *ViceTransportMock) SendCalls() []struct {
	Name string
} {
	var calls []struct {
		Name string
	}
	lockViceTransportMockSend.RLock()
	calls = mock.calls.Send
	lockViceTransportMockSend.RUnlock()
	return calls
}

// Stop calls StopFunc.
func (mock *ViceTransportMock) Stop() {
	if mock.StopFunc == nil {
		panic("moq: ViceTransportMock.StopFunc is nil but ViceTransport.Stop was just called")
	}
	callInfo := struct {
	}{}
	lockViceTransportMockStop.Lock()
	mock.calls.Stop = append(mock.calls.Stop, callInfo)
	lockViceTransportMockStop.Unlock()
	mock.StopFunc()
}

// StopCalls gets all the calls that were made to Stop.
// Check the length with:
//     len(mockedViceTransport.StopCalls())
func (mock *ViceTransportMock) StopCalls() []struct {
} {
	var calls []struct {
	}
	lockViceTransportMockStop.RLock()
	calls = mock.calls.Stop
	lockViceTransportMockStop.RUnlock()
	return calls
}
